

using System;
using GoNet.AST;

namespace GoNet.IL
{
    enum EInstruction
    {
        Add,
        Add_Ovf,
        Add_Ovf_Un,
        And,
        Arglist,

        Beq,
        Beq_S,
        Bge,
        Bge_S,
        Bge_Un,
        Bge_Un_S,
        Bgt,
        Bgt_S,
        Bgt_Un,
        Bgt_Un_S,
        Ble,
        Ble_S,
        Ble_Un,
        Ble_Un_S,
        Blt,
        Blt_S,
        Blt_Un,
        Blt_Un_S,
        Bne_Un,
        Bne_Un_S,
        Br,
        Br_S,        
        BrFalse,
        BrFalse_S,
        BrTrue,
        BrTrue_S,

        Break,
        Call,
        Calli,
        Ceq,
        Cgt,
        Cgt_Un,
        Ckfinite,
        Clt,
        Clt_Un,

        Conv_I,
        Conv_I1,
        Conv_I2,
        Conv_I4,
        Conv_I8,
        Conv_R4,
        Conv_R8,
        Conv_U1,
        Conv_U2,
        Conv_U4,
        Conv_U8,
        Conv_U,
        Conv_Ovf_I,
        Conv_Ovf_I1,
        Conv_Ovf_I2,
        Conv_Ovf_I4,
        Conv_Ovf_I8,
        Conv_Ovf_U,
        Conv_Ovf_U1,
        Conv_Ovf_U2,
        Conv_Ovf_U4,
        Conv_Ovf_U8,
        Conv_R_Un,
        Conv_Ovf_I_Un,
        Conv_Ovf_I1_Un,
        Conv_Ovf_I2_Un,
        Conv_Ovf_I4_Un,
        Conv_Ovf_I8_Un,
        Conv_Ovf_U_Un,
        Conv_Ovf_U1_Un,
        Conv_Ovf_U2_Un,
        Conv_Ovf_U4_Un,
        Conv_Ovf_U8_Un,

        Cpblk,
        Div,
        Div_Un,
        Dup,
        Endfilter,
        Endfinally,
        Initblk,
        Jmp,
        Ldarg,
        Ldarg_S,
        Ldarg_0,
        Ldarg_1,
        Ldarg_2,
        Ldarg_3,
        Ldarga,
        Ldarga_S,

        Ldc_I4,
        Ldc_I8,
        Ldc_R4,
        Ldc_R8,
        Ldc_I4_0,
        Ldc_I4_1,
        Ldc_I4_2,
        Ldc_I4_3,
        Ldc_I4_4,
        Ldc_I4_5,
        Ldc_I4_6,
        Ldc_I4_7,
        Ldc_I4_8,
        Ldc_I4_M1,
        Ldc_I4_S,
        Ldftn,
        Ldind_I1,
        Ldind_I2,
        Ldind_I4,
        Ldind_I8,
        Ldind_U1,
        Ldind_U2,
        Ldind_U4,
        Ldind_U8,
        Ldind_R4,
        Ldind_R8,
        Ldind_I,
        Ldind_Ref,

        Ldloc,
        Ldloc_S,
        Ldloc_0,
        Ldloc_1,
        Ldloc_2,
        Ldloc_3,

        Ldloca,
        Ldloca_S,

        Ldnull,
        Leave,
        Leave_S,
        Localloc,
        Mul,
        Mul_Ovf,
        Mul_Ovf_Un,

        Neg,
        Nop,
        Not,
        Or,
        Pop,
        Rem,
        Rem_Un,

        Ret,
        Shl,
        Shr,
        Shr_Un,
        Starg,
        Starg_S,

        Stind_I1,
        Stind_I2,
        Stind_I4,
        Stind_I8,
        Stind_R4,
        Stind_R8,
        Stind_I,
        StindRef,

        Stloc,
        Stloc_S,
        Stloc_0,
        Stloc_1,
        Stloc_2,
        Stloc_3,

        Sub,
        Sub_Ovf,
        Sub_Ovf_Un,
        Switch,
        Xor,

        Box,
        Callvirt,
        Castclass,
        Cpobj,
        InitObj,
        Isinst,
        Ldelem,
        Ldelem_I1,
        Ldelem_I2,
        Ldelem_I4,
        Ldelem_I8,
        Ldelem_U1,
        Ldelem_U2,
        Ldelem_U4,
        Ldelem_U8,
        Ldelem_R4,
        Ldelem_R8,
        Ldelem_I,
        Ldelem_Ref,

        Ldelema,
        Ldfld,
        Ldflda,
        Ldlen,
        Ldobj,
        Ldsfld,
        Ldsflda,
        Ldstr,
        Ldtoken,
        Ldvirtftn,
        Mkrefany,
        Newarr,
        Newobj,
        Refanytype,
        Refanyval,
        Rethrow,
        Sizeof,
        Stelem,
        Stelem_I1,
        Stelem_I2,
        Stelem_I4,
        Stelem_I8,
        Stelem_R4,
        Stelem_R8,
        Stelem_I,
        Stelem_Ref,
        Stfld,
        Stobj,
        Stsfld,
        Throw,
        Unbox,
        Unbox_Any,

    }

    class Instruction : Node
    {
        public EInstruction Type { get; private set; }

        public Instruction(EInstruction type)
            : base(false)
        {
            Type = type;
        }

        public object Argument
        {
            get; set;
        }

        public override Node Clone()
        {
            return new Instruction(Type)
            {
                Argument = Argument
            };
        }
    }
}
